// This file is auto-generated by @hey-api/openapi-ts

export const Body_login_for_access_token_users_login_postSchema = {
  properties: {
    grant_type: {
      anyOf: [
        {
          type: 'string',
          pattern: '^password$',
        },
        {
          type: 'null',
        },
      ],
    },
    username: {
      type: 'string',
    },
    password: {
      type: 'string',
    },
    scope: {
      type: 'string',
      default: '',
    },
    client_id: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
    },
    client_secret: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
    },
  },
  type: 'object',
  required: ['username', 'password'],
} as const;

export const CreateUserFormSchema = {
  properties: {
    username: {
      type: 'string',
      maxLength: 50,
      minLength: 6,
    },
    email: {
      anyOf: [
        {
          type: 'string',
          format: 'email',
        },
        {
          type: 'null',
        },
      ],
    },
    full_name: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
    },
    password: {
      type: 'string',
      maxLength: 50,
      minLength: 6,
    },
    password_repeat: {
      type: 'string',
      maxLength: 50,
      minLength: 6,
    },
  },
  type: 'object',
  required: ['username', 'password', 'password_repeat'],
} as const;

export const EmailRequestSchema = {
  properties: {
    email: {
      type: 'string',
      format: 'email',
    },
  },
  type: 'object',
  required: ['email'],
} as const;

export const EmailVerificationStatusSchema = {
  type: 'string',
  enum: ['verified', 'verifying', 'none'],
} as const;

export const HTTPValidationErrorSchema = {
  properties: {
    detail: {
      items: {
        $ref: '#/components/schemas/ValidationError',
      },
      type: 'array',
    },
  },
  type: 'object',
} as const;

export const PasswordResetFormSchema = {
  properties: {
    password: {
      type: 'string',
      maxLength: 50,
      minLength: 6,
    },
    password_repeat: {
      type: 'string',
      maxLength: 50,
      minLength: 6,
    },
  },
  type: 'object',
  required: ['password', 'password_repeat'],
} as const;

export const TokenSchema = {
  properties: {
    access_token: {
      type: 'string',
    },
    token_type: {
      type: 'string',
    },
  },
  type: 'object',
  required: ['access_token', 'token_type'],
} as const;

export const UpdateUserFormSchema = {
  properties: {
    username: {
      type: 'string',
      maxLength: 50,
      minLength: 6,
    },
    email: {
      anyOf: [
        {
          type: 'string',
          format: 'email',
        },
        {
          type: 'null',
        },
      ],
    },
    full_name: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
    },
    password: {
      anyOf: [
        {
          type: 'string',
          maxLength: 50,
          minLength: 6,
        },
        {
          type: 'null',
        },
      ],
    },
    password_repeat: {
      anyOf: [
        {
          type: 'string',
          maxLength: 50,
          minLength: 6,
        },
        {
          type: 'null',
        },
      ],
    },
  },
  type: 'object',
  required: ['username'],
} as const;

export const UserResponseSchema = {
  properties: {
    username: {
      type: 'string',
      maxLength: 50,
      minLength: 6,
    },
    email: {
      anyOf: [
        {
          type: 'string',
          format: 'email',
        },
        {
          type: 'null',
        },
      ],
    },
    full_name: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
    },
    email_verification_status: {
      $ref: '#/components/schemas/EmailVerificationStatus',
    },
  },
  type: 'object',
  required: ['username', 'email_verification_status'],
} as const;

export const ValidationErrorSchema = {
  properties: {
    loc: {
      items: {
        anyOf: [
          {
            type: 'string',
          },
          {
            type: 'integer',
          },
        ],
      },
      type: 'array',
    },
    msg: {
      type: 'string',
    },
    type: {
      type: 'string',
    },
  },
  type: 'object',
  required: ['loc', 'msg', 'type'],
} as const;
